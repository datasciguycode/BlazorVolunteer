@page "/status"
@rendermode InteractiveServer

@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@using Volunteer.Models
@using Volunteer.Services
@using Volunteer.Components
@using StatusModel = Volunteer.Models.Status

@inject IStatusService _statusService

<PageTitle>Status</PageTitle>

<AuthorizedView RequiresAdmin="true">

<style>
    .status-grid {
        --fluent-data-grid-cell-height: 40px;
    }

    .editable-row {
        cursor: pointer;
    }

    .editable-row:hover {
        background-color: var(--fill-color);
    }

    .search-row {
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: 8px;
        margin: 16px 0;
        align-items: center;
    }

    .search-input {
        padding: 6px;
        border: 1px solid #ccc;
        border-radius: 3px;
        width: 100%;
    }

    .wide-button {
        min-width: 120px;
    }

    .standard-button {
        min-width: 100px;
    }
</style>

<br />

<!-- Add Status and Clear Search Buttons -->
<div style="margin: 8px 0;">
    <FluentButton Appearance="Appearance.Accent" @onclick="OpenAddDialog" Class="wide-button" style="margin-right: 16px;">Add Status</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" @onclick="ClearSearch" Class="standard-button">Clear Search</FluentButton>
</div>

<br />

<!-- Search Field -->
<div class="search-row">
    <input type="text" id="nameSearch" @bind="searchText" @oninput="OnSearchInput" placeholder="Search by name..."
        class="search-input" />
</div>

<!-- Datagrid -->
<FluentDataGrid Items="@GetFilteredStatuss()" TGridItem="StatusModel" Class="status-grid"
    RowClass="@(_ => "editable-row")" OnRowDoubleClick="@OnRowDoubleClick">
    <PropertyColumn Title="Status" Property="@(p => p.Name)" />
    <PropertyColumn Title="Created" Property="@(p => p.DateCreated)" Format="MM/dd/yyyy" />
    <PropertyColumn Title="Modified" Property="@(p => p.DateModified)" Format="MM/dd/yyyy" />
    <TemplateColumn Title="Actions">
        <FluentButton Appearance="Appearance.Lightweight" @onclick="async () => await OpenEditDialog(context)" 
            IconEnd="@(new Icons.Regular.Size16.Edit())" Title="Edit" />
        @* <FluentButton Appearance="Appearance.Lightweight" @onclick="() => DeleteStatus(context)" 
            IconEnd="@(new Icons.Regular.Size16.Delete())" Title="Delete" /> *@
    </TemplateColumn>
</FluentDataGrid>

<br />

<p style="font-size: 12px; color: #666; margin-top: 8px;">Double-click any row to edit</p>

<!-- Simple Dialog for Add/Edit -->
<FluentDialog @ref="statusDialog" Hidden="@(!_showDialog)" TrapFocus="true" Modal="true" OnDismiss="CloseDialog" @onkeydown="@((e) => HandleKeyDown(e))">
    <FluentDialogHeader>
        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
            <h3 style="margin: 0;">@(_isEditMode ? "Edit Status" : "Add New Status")</h3>
            <FluentButton 
                Appearance="Appearance.Lightweight"
                @onclick="CloseDialog"
                Title="Finish"
                IconEnd="@(new Icons.Regular.Size16.Dismiss())"
                style="min-width: 32px; padding: 4px;" />
        </div>
    </FluentDialogHeader>

    <FluentDialogBody>
        <EditForm Model="@_currentStatus" OnValidSubmit="SaveStatus" FormName="StatusForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <FluentStack Orientation="Orientation.Vertical" Gap="3" Style="min-width: 300px;">
                <FluentTextField @ref="nameField" Label="Status:" @bind-Value="_currentStatus.Name"
                    Required="true" Style="width: 100%;" />
            </FluentStack>
        </EditForm>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" @onclick="SaveStatus" Class="standard-button">Save</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" @onclick="CloseDialog" Class="standard-button">Cancel</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private List<StatusModel> _statusList = new();
    private FluentDialog? statusDialog;
    private FluentTextField? nameField;
    private string searchText = string.Empty;
    private bool _showDialog = false;
    private bool _isEditMode = false;
    private StatusModel _currentStatus = new();

    // --------------------------------------------------------------------
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _statusList = await _statusService.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading status: {ex.Message}");
        }
    }

    // --------------------------------------------------------------------
    // Search Methods
    // --------------------------------------------------------------------

    private IQueryable<StatusModel> GetFilteredStatuss()
    {
        var filteredStatuss = _statusList.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredStatuss = filteredStatuss.Where(i => i.Name != null &&
                i.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        return filteredStatuss.OrderBy(i => i.Name);
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchText = string.Empty;
        StateHasChanged();
    }

    // --------------------------------------------------------------------
    // Dialog Methods
    // --------------------------------------------------------------------

    private async Task OpenAddDialog()
    {
        _currentStatus = new StatusModel();
        _isEditMode = false;
        _showDialog = true;
        StateHasChanged();
        await Task.Delay(50); // Small delay to ensure dialog is rendered
        await FocusNameField();
    }

    private async Task OpenEditDialog(StatusModel status)
    {
        _currentStatus = new StatusModel 
        { 
            StatusId = status.StatusId, 
            Name = status.Name 
        };
        _isEditMode = true;
        _showDialog = true;
        StateHasChanged();
        await Task.Delay(50); // Small delay to ensure dialog is rendered
        await FocusNameField();
    }

    private void CloseDialog()
    {
        _showDialog = false;
        _currentStatus = new StatusModel();
        StateHasChanged();
    }

    // --------------------------------------------------------------------

    private async Task SaveStatus()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_currentStatus.Name))
                return;

            Console.WriteLine($"Saving Status: ID={_currentStatus.StatusId}, Name='{_currentStatus.Name}', IsEditMode={_isEditMode}");

            if (_isEditMode)
            {
                await _statusService.UpdateAsync(_currentStatus);
                Console.WriteLine("Status updated successfully");
            }
            else
            {
                await _statusService.AddAsync(_currentStatus);
                Console.WriteLine("Status added successfully");
            }

            _statusList = await _statusService.ToListAsync(); // Refresh the list
            CloseDialog();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving status: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    // --------------------------------------------------------------------

    private async Task DeleteStatus(StatusModel status)
    {
        try
        {
            await _statusService.DeleteAsync(status.StatusId);
            _statusList = await _statusService.ToListAsync(); // Refresh the list
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting status: {ex.Message}");
        }
    }

    // --------------------------------------------------------------------

    private async void OnRowDoubleClick(FluentDataGridRow<StatusModel> row)
    {
        await OpenEditDialog(row.Item!);
    }

    // --------------------------------------------------------------------

    private async Task FocusNameField()
    {
        try
        {
            if (nameField != null)
            {
                await nameField.Element!.FocusAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting focus: {ex.Message}");
        }
    }

    // --------------------------------------------------------------------

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            CloseDialog();
        }
    }

    // --------------------------------------------------------------------
}

</AuthorizedView>
